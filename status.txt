good morning my friend

alright, i'm almost done with the project.

general status:
- bufferpool and b+tree work now (almost*, see below point 2.) perfectly together. 
- i also implemented some part of the diskmanager. i opted now for the 1 node = 1 file option, because it's easier to get it working in the beginning. when it works and i've still time, i'll make it one 1 file. but i first want a working product if you know what i mean. 
- the code base is currently a bit messy... but that's alright, as long as it works. we can always improve once it's working
- Finally, you might have noticed that I changed quite a lot inside of memory.go and your findsequentialspace() part is not used. You were right today, this belongs to the disk part. I will, at some point, add it there, once everything is working. But currently I'm all for a working product, before doing optimization. The code is still there, I didn't delete it!

here are some instructions that I need from you: 
2. is more important than 1. (1. could make it more efficient but 2. is crucial for it to work correctly...)

1. I changed some function signatures of yours in the bplustree.go file. Usually, we don't want to pass pointers to any function, 
e.g. bpt.search(n node*, key Key) becomes search(nodeID NodeID, key Key). Why? well, the thing is: we don't know if the passed node is still accessible in memory. it might be already on disk. so all we do is pass nodeIDs. then, if we need the node, we call bpt.bpm.FetchNode(nodeID) to get the actual pointer to the node from the bufferpool. the bufferpool returns it immediately if it's in the pool, otherwise it will fetch it from disk an return it. 
So, I changed basically all function that accept references of nodes as arguments to functions that accept nodeIDs. However, there's a slight issue. In `node.go` and `leaf.go` I don't have access to the bufferpoolmanager, which I need for FetchNode(). I tried changing it a bit but I really couldn't wrap my head around it and I don't want to "change" your work fundamentally. So, could you somehow fix that? Everything still works (and most likely he won't even notice) but I think this is where lots of memory is used. If we can change the functions of `node.go` and `leaf.go` to functions that accept nodeIDs as parameters, then it should be less exhausting on memory (I checked with my activity monitor. takes quite some space! maybe fixing this will make it use less memory if Go's garbage collection is good). To do that, all you have to do is change 4 functions. Search for "// Convert node to nodeID, fetch it using bpm" and you'll see which functions in `node.go` and `leaf.go`. Also, I added a snippet code:

	// FX
	// Pass nodeID and siblingID and fetch it like this:
	// node, err := bpt.bpm.FetchNode(nodeID)
	// if err != nil { 
	// 	bpt.bpm.UnpinNode(nodeID)
	// 	return false, err
	// }

However, as you can see, you need access to the bpt.bpm! I think one could implement this functions as part of the tree interface, such that the bpm can be accessed.
So basically e.g.:
func (p *node) splitLeaf(n, sibling *node, i int) error { 

becomes

func (bpt *BPlusTree) splitLeaf(p, n, sibling *node, i int) error {

Can you see what I mean? Could you do this? I think it shouldn't take you too long! It's only 4 functions:
func (p *node) splitLeaf(n, sibling *node, i int) error {
func (n *node) insertChildAt(at int, child *node) error {
func (p *node) splitNode(n, sibling *node, i int) error {
func (p *node) split(n, sibling *node, i int) error {

2. Then there's a slight issue which I really don't know why it's happening. I'll try to figure it out when I wake up. I get the following error when I run my test: 

"while inserting to kv store(154): the size of the slice "entry" exceeds its supposed bound 5/6" (TestInsert yields the same error)

And I don't know why this is happening. I noticed that (see picture) in the ReadNode() method: If I implement the real "disk" by storing and unmarshalling, then I get this error. However, if I just comment the real part and uncomment the "MOCK DISK" part, then it works without any issue. 
It happens at insertion, when I insert stuff. Can you think of any reason why this is happening? Also, I didn't touch anything of unmarshalling/marshalling functions and also I didn't add any new field to the nodes.

